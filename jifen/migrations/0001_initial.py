# Generated by Django 3.2.24 on 2025-03-21 15:26

from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('group_id', models.BigIntegerField(help_text='Telegram群组ID', unique=True)),
                ('group_title', models.CharField(blank=True, help_text='群组名称', max_length=255, null=True)),
                ('group_type', models.CharField(choices=[('GROUP', '群组'), ('SUPERGROUP', '超级群组'), ('CHANNEL', '频道')], help_text='群组类型', max_length=20)),
                ('member_count', models.IntegerField(blank=True, help_text='成员数量', null=True)),
                ('is_active', models.BooleanField(default=True, help_text='是否激活')),
                ('bot_is_admin', models.BooleanField(default=False, help_text='机器人是否为管理员')),
                ('joined_at', models.DateTimeField(default=django.utils.timezone.now, help_text='机器人加入时间')),
                ('last_activity', models.DateTimeField(auto_now=True, help_text='最后活动时间')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='更新时间')),
            ],
            options={
                'verbose_name': '群组',
                'verbose_name_plural': '群组',
                'db_table': 'groups',
            },
        ),
        migrations.CreateModel(
            name='Raffle',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='抽奖标题', max_length=255)),
                ('description', models.TextField(blank=True, help_text='抽奖描述', null=True)),
                ('prize_description', models.TextField(help_text='奖品描述')),
                ('min_points', models.IntegerField(default=0, help_text='参与所需最低积分')),
                ('points_cost', models.IntegerField(default=0, help_text='参与消耗积分')),
                ('max_participants', models.IntegerField(blank=True, help_text='最大参与人数', null=True)),
                ('winner_count', models.IntegerField(default=1, help_text='中奖人数')),
                ('raffle_type', models.CharField(choices=[('RANDOM', '随机抽取'), ('MANUAL', '手动指定')], default='RANDOM', help_text='开奖方式', max_length=20)),
                ('open_type', models.CharField(choices=[('TIME', '定时开奖'), ('COUNT', '满人开奖')], help_text='开奖条件', max_length=20)),
                ('open_time', models.DateTimeField(blank=True, help_text='定时开奖时间', null=True)),
                ('open_count', models.IntegerField(blank=True, help_text='满人开奖人数', null=True)),
                ('status', models.CharField(choices=[('PENDING', '待开始'), ('ONGOING', '进行中'), ('ENDED', '已结束'), ('CANCELLED', '已取消')], default='PENDING', help_text='抽奖状态', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='更新时间')),
            ],
            options={
                'verbose_name': '抽奖活动',
                'verbose_name_plural': '抽奖活动',
                'db_table': 'raffles',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('telegram_id', models.BigIntegerField(help_text='Telegram用户ID')),
                ('username', models.CharField(blank=True, help_text='Telegram用户名', max_length=64, null=True)),
                ('first_name', models.CharField(blank=True, help_text='名', max_length=64, null=True)),
                ('last_name', models.CharField(blank=True, help_text='姓', max_length=64, null=True)),
                ('points', models.IntegerField(default=0, help_text='在该群组中的积分')),
                ('is_admin', models.BooleanField(default=False, help_text='是否为管理员')),
                ('is_active', models.BooleanField(default=True, help_text='是否在群组中活跃')),
                ('joined_at', models.DateTimeField(auto_now_add=True, help_text='加入时间')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='更新时间')),
                ('group', models.ForeignKey(help_text='用户所在群组ID', on_delete=django.db.models.deletion.CASCADE, to='jifen.group')),
            ],
            options={
                'verbose_name': '用户',
                'verbose_name_plural': '用户',
                'db_table': 'users',
            },
        ),
        migrations.CreateModel(
            name='SubscriptionRequirement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('entity_type', models.CharField(choices=[('CHANNEL', '频道'), ('GROUP', '群组')], help_text='实体类型', max_length=20)),
                ('entity_id', models.CharField(help_text='频道/群组ID', max_length=255)),
                ('entity_username', models.CharField(blank=True, help_text='频道/群组用户名', max_length=64, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='创建时间')),
                ('raffle', models.ForeignKey(help_text='关联的抽奖ID', on_delete=django.db.models.deletion.CASCADE, related_name='subscription_requirements', to='jifen.raffle')),
            ],
            options={
                'verbose_name': '关注要求',
                'verbose_name_plural': '关注要求',
                'db_table': 'subscription_requirements',
            },
        ),
        migrations.CreateModel(
            name='RaffleParticipant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('points_deducted', models.IntegerField(default=0, help_text='扣除的积分')),
                ('is_winner', models.BooleanField(default=False, help_text='是否中奖')),
                ('join_time', models.DateTimeField(auto_now_add=True, help_text='参与时间')),
                ('selected_at', models.DateTimeField(blank=True, help_text='中奖时间', null=True)),
                ('raffle', models.ForeignKey(help_text='抽奖ID', on_delete=django.db.models.deletion.CASCADE, related_name='participants', to='jifen.raffle')),
                ('user', models.ForeignKey(help_text='用户ID', on_delete=django.db.models.deletion.CASCADE, to='jifen.user')),
            ],
            options={
                'verbose_name': '抽奖参与记录',
                'verbose_name_plural': '抽奖参与记录',
                'db_table': 'raffle_participants',
            },
        ),
        migrations.AddField(
            model_name='raffle',
            name='created_by',
            field=models.ForeignKey(help_text='创建者用户ID', on_delete=django.db.models.deletion.CASCADE, to='jifen.user'),
        ),
        migrations.AddField(
            model_name='raffle',
            name='group',
            field=models.ForeignKey(help_text='关联的群组ID', on_delete=django.db.models.deletion.CASCADE, to='jifen.group'),
        ),
        migrations.CreateModel(
            name='PointTransaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.IntegerField(help_text='变动数量')),
                ('type', models.CharField(choices=[('CHECKIN', '签到'), ('MESSAGE', '发言'), ('INVITE', '邀请'), ('RAFFLE_PARTICIPATION', '参与抽奖'), ('ADMIN_ADJUST', '管理员调整'), ('OTHER', '其他')], help_text='变动类型', max_length=30)),
                ('description', models.CharField(blank=True, help_text='变动描述', max_length=255, null=True)),
                ('transaction_date', models.DateField(help_text='交易日期')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='创建时间')),
                ('group', models.ForeignKey(help_text='群组ID', on_delete=django.db.models.deletion.CASCADE, to='jifen.group')),
                ('user', models.ForeignKey(help_text='用户ID', on_delete=django.db.models.deletion.CASCADE, to='jifen.user')),
            ],
            options={
                'verbose_name': '积分变动记录',
                'verbose_name_plural': '积分变动记录',
                'db_table': 'point_transactions',
            },
        ),
        migrations.CreateModel(
            name='PointRule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('checkin_keyword', models.CharField(default='签到', help_text='签到关键词', max_length=50)),
                ('checkin_points', models.IntegerField(default=5, help_text='签到获得积分')),
                ('message_points_enabled', models.BooleanField(default=True, help_text='是否启用发言积分')),
                ('message_points', models.IntegerField(default=1, help_text='每条消息获得积分')),
                ('message_daily_limit', models.IntegerField(default=50, help_text='每日发言积分上限')),
                ('invite_points_enabled', models.BooleanField(default=True, help_text='是否启用邀请积分')),
                ('invite_points', models.IntegerField(default=10, help_text='邀请一人获得积分')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='更新时间')),
                ('group', models.OneToOneField(help_text='群组ID', on_delete=django.db.models.deletion.CASCADE, to='jifen.group')),
            ],
            options={
                'verbose_name': '积分规则',
                'verbose_name_plural': '积分规则',
                'db_table': 'point_rules',
            },
        ),
        migrations.CreateModel(
            name='MessagePoint',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message_id', models.BigIntegerField(help_text='消息ID', unique=True)),
                ('points_awarded', models.IntegerField(default=0, help_text='获得积分')),
                ('message_date', models.DateField(help_text='消息日期')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='创建时间')),
                ('group', models.ForeignKey(help_text='群组ID', on_delete=django.db.models.deletion.CASCADE, to='jifen.group')),
                ('user', models.ForeignKey(help_text='用户ID', on_delete=django.db.models.deletion.CASCADE, to='jifen.user')),
            ],
            options={
                'verbose_name': '发言积分记录',
                'verbose_name_plural': '发言积分记录',
                'db_table': 'message_points',
            },
        ),
        migrations.CreateModel(
            name='Invite',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('points_awarded', models.IntegerField(default=0, help_text='获得积分')),
                ('invite_date', models.DateField(help_text='邀请日期')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='创建时间')),
                ('group', models.ForeignKey(help_text='群组ID', on_delete=django.db.models.deletion.CASCADE, to='jifen.group')),
                ('invitee', models.ForeignKey(help_text='被邀请人ID', on_delete=django.db.models.deletion.CASCADE, related_name='invites_received', to='jifen.user')),
                ('inviter', models.ForeignKey(help_text='邀请人ID', on_delete=django.db.models.deletion.CASCADE, related_name='invites_sent', to='jifen.user')),
            ],
            options={
                'verbose_name': '邀请记录',
                'verbose_name_plural': '邀请记录',
                'db_table': 'invites',
            },
        ),
        migrations.CreateModel(
            name='DailyMessageStat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message_date', models.DateField(help_text='统计日期')),
                ('message_count', models.IntegerField(default=0, help_text='消息数量')),
                ('points_awarded', models.IntegerField(default=0, help_text='获得积分')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='更新时间')),
                ('group', models.ForeignKey(help_text='群组ID', on_delete=django.db.models.deletion.CASCADE, to='jifen.group')),
                ('user', models.ForeignKey(help_text='用户ID', on_delete=django.db.models.deletion.CASCADE, to='jifen.user')),
            ],
            options={
                'verbose_name': '发言每日统计',
                'verbose_name_plural': '发言每日统计',
                'db_table': 'daily_message_stats',
            },
        ),
        migrations.CreateModel(
            name='CheckIn',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('points_awarded', models.IntegerField(default=0, help_text='获得积分')),
                ('checkin_date', models.DateField(help_text='签到日期')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='创建时间')),
                ('group', models.ForeignKey(help_text='群组ID', on_delete=django.db.models.deletion.CASCADE, to='jifen.group')),
                ('user', models.ForeignKey(help_text='用户ID', on_delete=django.db.models.deletion.CASCADE, to='jifen.user')),
            ],
            options={
                'verbose_name': '签到记录',
                'verbose_name_plural': '签到记录',
                'db_table': 'checkins',
            },
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['telegram_id'], name='users_telegra_d76140_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['group'], name='users_group_i_d3ba74_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='user',
            unique_together={('telegram_id', 'group')},
        ),
        migrations.AddIndex(
            model_name='subscriptionrequirement',
            index=models.Index(fields=['raffle'], name='subscriptio_raffle__a11787_idx'),
        ),
        migrations.AddIndex(
            model_name='raffleparticipant',
            index=models.Index(fields=['user'], name='raffle_part_user_id_878a35_idx'),
        ),
        migrations.AddIndex(
            model_name='raffleparticipant',
            index=models.Index(fields=['is_winner'], name='raffle_part_is_winn_757b00_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='raffleparticipant',
            unique_together={('raffle', 'user')},
        ),
        migrations.AddIndex(
            model_name='raffle',
            index=models.Index(fields=['status'], name='raffles_status_a24d42_idx'),
        ),
        migrations.AddIndex(
            model_name='raffle',
            index=models.Index(fields=['created_by'], name='raffles_created_bf6282_idx'),
        ),
        migrations.AddIndex(
            model_name='raffle',
            index=models.Index(fields=['group'], name='raffles_group_i_98002c_idx'),
        ),
        migrations.AddIndex(
            model_name='pointtransaction',
            index=models.Index(fields=['user'], name='point_trans_user_id_2fd4a8_idx'),
        ),
        migrations.AddIndex(
            model_name='pointtransaction',
            index=models.Index(fields=['group'], name='point_trans_group_i_228499_idx'),
        ),
        migrations.AddIndex(
            model_name='pointtransaction',
            index=models.Index(fields=['type'], name='point_trans_type_c1fa4c_idx'),
        ),
        migrations.AddIndex(
            model_name='pointtransaction',
            index=models.Index(fields=['transaction_date'], name='point_trans_transac_a09bb7_idx'),
        ),
        migrations.AddIndex(
            model_name='messagepoint',
            index=models.Index(fields=['user'], name='message_poi_user_id_ed4ba9_idx'),
        ),
        migrations.AddIndex(
            model_name='messagepoint',
            index=models.Index(fields=['group'], name='message_poi_group_i_f81da0_idx'),
        ),
        migrations.AddIndex(
            model_name='messagepoint',
            index=models.Index(fields=['message_date'], name='message_poi_message_796bae_idx'),
        ),
        migrations.AddIndex(
            model_name='invite',
            index=models.Index(fields=['inviter'], name='invites_inviter_372422_idx'),
        ),
        migrations.AddIndex(
            model_name='invite',
            index=models.Index(fields=['group'], name='invites_group_i_34468f_idx'),
        ),
        migrations.AddIndex(
            model_name='invite',
            index=models.Index(fields=['invite_date'], name='invites_invite__ecf17e_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='invite',
            unique_together={('inviter', 'invitee', 'group')},
        ),
        migrations.AddIndex(
            model_name='dailymessagestat',
            index=models.Index(fields=['user'], name='daily_messa_user_id_8e2aa6_idx'),
        ),
        migrations.AddIndex(
            model_name='dailymessagestat',
            index=models.Index(fields=['group'], name='daily_messa_group_i_e60e29_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='dailymessagestat',
            unique_together={('user', 'group', 'message_date')},
        ),
        migrations.AddIndex(
            model_name='checkin',
            index=models.Index(fields=['user'], name='checkins_user_id_d9e778_idx'),
        ),
        migrations.AddIndex(
            model_name='checkin',
            index=models.Index(fields=['group'], name='checkins_group_i_8529bc_idx'),
        ),
        migrations.AddIndex(
            model_name='checkin',
            index=models.Index(fields=['checkin_date'], name='checkins_checkin_d44766_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='checkin',
            unique_together={('user', 'group', 'checkin_date')},
        ),
    ]
